// NOTE: Shader automatically converted from Godot Engine 4.5.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform ivec2 grid_size = ivec2(128, 128);
uniform sampler2D vertical_shift_tex : source_color, filter_linear_mipmap, repeat_enable;
uniform float vertical_shift : hint_range(0.0, 100.0, 0.1) = 0.0;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying flat ivec2 grid_pos;
varying vec2 grid_uv;
varying float spawn_amt;


void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	grid_pos.x = INSTANCE_ID % grid_size.x;
	grid_pos.y =INSTANCE_ID/grid_size.x;
	grid_uv = vec2(grid_pos) / vec2(grid_size);
	spawn_amt = texture(vertical_shift_tex, grid_uv).r;
	VERTEX.y += spawn_amt * vertical_shift;
}


void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	//ALPHA = clamp(mix(0.0, 1.1, 1.0 - spawn_amt), 0.0, 1.0);
	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
